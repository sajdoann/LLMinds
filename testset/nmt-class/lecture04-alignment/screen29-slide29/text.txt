 Basis of the classical algorithm by Galen Church. It's based on similar character length of aligned sentences. It doesn't look at the words at all and it uses just the dynamic programming style to search for the best alignments. So this dynamic programming style is very similar to the edit distance algorithm. You're finding the minimum edit distance in grouping the sentences into the left and right parts. in the past years luckily and if you want to see the Galen Church algorithm illustrated as it proceeds then I would recommend looking at this MT talk number seven on sentence alignment that illustrates how the dynamic programming is done. Then after some years a colleague of mine at the faculty of ours evaluated Czech English sentence alignment and he compared multiple different algorithms because the Galen Church is very baseline approach but sufficient for many purposes and he has figured out that the sentence alignment is nearly perfect the automatic one. If you especially if you combine multiple liners then you can rely on that. So the standard tool for sentence alignment still these days is the tool by Daniel Varga called and it's some C code that still compiles well even on current machines and and runs reasonably so if you if you feed it with reasonably sized documents it will it will provide a good alignment. There were improvements of the algorithm and the implementation but they were not as easy to deploy so people stick with HoneyLine for most of the time. Okay. So that's the sentence alignment a task which is